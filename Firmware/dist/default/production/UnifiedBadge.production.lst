

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Sep 16 20:32:50 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	12LF1822
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.10
    22                           ; Generated 31/07/2019 GMT
    23                           ; 
    24                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC12LF1822 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  008C                     	;# 
    82  0091                     	;# 
    83  0092                     	;# 
    84  0095                     	;# 
    85  0096                     	;# 
    86  0097                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009A                     	;# 
    90  009B                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  010C                     	;# 
    96  0111                     	;# 
    97  0112                     	;# 
    98  0115                     	;# 
    99  0116                     	;# 
   100  0117                     	;# 
   101  0118                     	;# 
   102  0119                     	;# 
   103  011A                     	;# 
   104  011B                     	;# 
   105  011D                     	;# 
   106  011D                     	;# 
   107  018C                     	;# 
   108  0191                     	;# 
   109  0191                     	;# 
   110  0192                     	;# 
   111  0193                     	;# 
   112  0193                     	;# 
   113  0193                     	;# 
   114  0194                     	;# 
   115  0195                     	;# 
   116  0196                     	;# 
   117  0199                     	;# 
   118  019A                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019B                     	;# 
   123  019C                     	;# 
   124  019C                     	;# 
   125  019D                     	;# 
   126  019E                     	;# 
   127  019F                     	;# 
   128  020C                     	;# 
   129  0211                     	;# 
   130  0211                     	;# 
   131  0212                     	;# 
   132  0212                     	;# 
   133  0213                     	;# 
   134  0213                     	;# 
   135  0214                     	;# 
   136  0214                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0215                     	;# 
   140  0216                     	;# 
   141  0216                     	;# 
   142  0217                     	;# 
   143  0217                     	;# 
   144  0291                     	;# 
   145  0291                     	;# 
   146  0292                     	;# 
   147  0293                     	;# 
   148  0294                     	;# 
   149  0295                     	;# 
   150  0295                     	;# 
   151  0296                     	;# 
   152  0391                     	;# 
   153  0392                     	;# 
   154  0393                     	;# 
   155  039A                     	;# 
   156  039C                     	;# 
   157  039D                     	;# 
   158  039E                     	;# 
   159  039F                     	;# 
   160  0FE4                     	;# 
   161  0FE5                     	;# 
   162  0FE6                     	;# 
   163  0FE7                     	;# 
   164  0FE8                     	;# 
   165  0FE9                     	;# 
   166  0FEA                     	;# 
   167  0FEB                     	;# 
   168  0FED                     	;# 
   169  0FEE                     	;# 
   170  0FEF                     	;# 
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  0007                     	;# 
   179  0008                     	;# 
   180  0009                     	;# 
   181  000A                     	;# 
   182  000B                     	;# 
   183  000C                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  001E                     	;# 
   196  001F                     	;# 
   197  008C                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0115                     	;# 
   215  0116                     	;# 
   216  0117                     	;# 
   217  0118                     	;# 
   218  0119                     	;# 
   219  011A                     	;# 
   220  011B                     	;# 
   221  011D                     	;# 
   222  011D                     	;# 
   223  018C                     	;# 
   224  0191                     	;# 
   225  0191                     	;# 
   226  0192                     	;# 
   227  0193                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0194                     	;# 
   231  0195                     	;# 
   232  0196                     	;# 
   233  0199                     	;# 
   234  019A                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019C                     	;# 
   240  019C                     	;# 
   241  019D                     	;# 
   242  019E                     	;# 
   243  019F                     	;# 
   244  020C                     	;# 
   245  0211                     	;# 
   246  0211                     	;# 
   247  0212                     	;# 
   248  0212                     	;# 
   249  0213                     	;# 
   250  0213                     	;# 
   251  0214                     	;# 
   252  0214                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0216                     	;# 
   257  0216                     	;# 
   258  0217                     	;# 
   259  0217                     	;# 
   260  0291                     	;# 
   261  0291                     	;# 
   262  0292                     	;# 
   263  0293                     	;# 
   264  0294                     	;# 
   265  0295                     	;# 
   266  0295                     	;# 
   267  0296                     	;# 
   268  0391                     	;# 
   269  0392                     	;# 
   270  0393                     	;# 
   271  039A                     	;# 
   272  039C                     	;# 
   273  039D                     	;# 
   274  039E                     	;# 
   275  039F                     	;# 
   276  0FE4                     	;# 
   277  0FE5                     	;# 
   278  0FE6                     	;# 
   279  0FE7                     	;# 
   280  0FE8                     	;# 
   281  0FE9                     	;# 
   282  0FEA                     	;# 
   283  0FEB                     	;# 
   284  0FED                     	;# 
   285  0FEE                     	;# 
   286  0FEF                     	;# 
   287                           
   288                           	psect	idataBANK0
   289  0321                     __pidataBANK0:	
   290                           
   291                           ;initializer for _randx
   292  0321  3401               	retlw	1
   293  0322  3400               	retlw	0
   294  0323  3400               	retlw	0
   295  0324  3400               	retlw	0
   296                           
   297                           	psect	nvCOMMON
   298  007D                     __pnvCOMMON:	
   299  007D                     _position:	
   300  007D                     	ds	1
   301                           
   302                           	psect	nvBANK0
   303  0038                     __pnvBANK0:	
   304  0038                     _animation:	
   305  0038                     	ds	1
   306  0018                     _T1CON	set	24
   307  000B                     _INTCON	set	11
   308  0018                     _T1CONbits	set	24
   309  0011                     _PIR1bits	set	17
   310  000B                     _INTCONbits	set	11
   311  0091                     _PIE1bits	set	145
   312  0095                     _OPTION_REGbits	set	149
   313  0099                     _OSCCON	set	153
   314  008C                     _TRISA	set	140
   315  010C                     _LATA	set	268
   316  018C                     _ANSELA	set	396
   317  020C                     _WPUA	set	524
   318  0392                     _IOCANbits	set	914
   319  0393                     _IOCAFbits	set	915
   320                           
   321                           ; #config settings
   322  0000                     
   323                           	psect	cinit
   324  003A                     start_initialization:	
   325  003A                     __initialization:	
   326                           
   327                           ; Initialize objects allocated to BANK0
   328  003A  2321               	fcall	__pidataBANK0	;fetch initializer
   329  003B  00B4               	movwf	__pdataBANK0& (0+127)
   330  003C  2322               	fcall	__pidataBANK0+1	;fetch initializer
   331  003D  00B5               	movwf	(__pdataBANK0+1)& (0+127)
   332  003E  2323               	fcall	__pidataBANK0+2	;fetch initializer
   333  003F  00B6               	movwf	(__pdataBANK0+2)& (0+127)
   334  0040  2324               	fcall	__pidataBANK0+3	;fetch initializer
   335  0041  00B7               	movwf	(__pdataBANK0+3)& (0+127)
   336                           
   337                           ; Clear objects allocated to BANK0
   338  0042  01A0               	clrf	__pbssBANK0& (0+127)
   339  0043  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   340  0044  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   341  0045  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   342  0046  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   343  0047  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   344  0048  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   345  0049  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   346  004A  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   347  004B  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   348  004C  01AA               	clrf	(__pbssBANK0+10)& (0+127)
   349  004D                     end_of_initialization:	
   350                           ;End of C runtime variable initialization code
   351                           
   352  004D                     __end_of__initialization:	
   353  004D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   354  004E  0020               	movlb	0
   355  004F  2850               	ljmp	_main	;jump to C main() function
   356                           
   357                           	psect	bssBANK0
   358  0020                     __pbssBANK0:	
   359  0020                     _Matrix:	
   360  0020                     	ds	9
   361  0029                     _debounce:	
   362  0029                     	ds	1
   363  002A                     _steps:	
   364  002A                     	ds	1
   365                           
   366                           	psect	dataBANK0
   367  0034                     __pdataBANK0:	
   368  0034                     _randx:	
   369  0034                     	ds	4
   370                           
   371                           	psect	cstackCOMMON
   372  0070                     __pcstackCOMMON:	
   373  0070                     ?_Display:	
   374  0070                     ??_Display:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_initializeVars:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_badgeLeds:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?_isr:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ??_isr:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_main:	
   390                           ; 1 bytes @ 0x0
   391                           
   392                           
   393                           ; 1 bytes @ 0x0
   394  0070                     	ds	1
   395  0071                     ??_initializeVars:	
   396  0071                     ??_badgeLeds:	
   397                           ; 1 bytes @ 0x1
   398                           
   399  0071                     ?___lmul:	
   400                           ; 1 bytes @ 0x1
   401                           
   402  0071                     ___lmul@multiplier:	
   403                           ; 4 bytes @ 0x1
   404                           
   405                           
   406                           ; 4 bytes @ 0x1
   407  0071                     	ds	2
   408  0073                     badgeLeds@leds:	
   409                           
   410                           ; 1 bytes @ 0x3
   411  0073                     	ds	2
   412  0075                     ___lmul@multiplicand:	
   413                           
   414                           ; 4 bytes @ 0x5
   415  0075                     	ds	4
   416  0079                     ??___lmul:	
   417  0079                     ___lmul@product:	
   418                           ; 1 bytes @ 0x9
   419                           
   420                           
   421                           ; 4 bytes @ 0x9
   422  0079                     	ds	4
   423                           
   424                           	psect	cstackBANK0
   425  002B                     __pcstackBANK0:	
   426  002B                     ?_rand:	
   427                           
   428                           ; 2 bytes @ 0x0
   429  002B                     	ds	2
   430  002D                     ??_rand:	
   431                           
   432                           ; 1 bytes @ 0x2
   433  002D                     	ds	5
   434  0032                     ??_main:	
   435                           
   436                           ; 1 bytes @ 0x7
   437  0032                     	ds	2
   438                           
   439                           	psect	maintext
   440  0050                     __pmaintext:	
   441 ;;
   442 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   443 ;;
   444 ;; *************** function _main *****************
   445 ;; Defined at:
   446 ;;		line 167 in file "main.c"
   447 ;; Parameters:    Size  Location     Type
   448 ;;		None
   449 ;; Auto vars:     Size  Location     Type
   450 ;;		None
   451 ;; Return value:  Size  Location     Type
   452 ;;                  1    wreg      void 
   453 ;; Registers used:
   454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   455 ;; Tracked objects:
   456 ;;		On entry : B1F/0
   457 ;;		On exit  : 0/0
   458 ;;		Unchanged: 0/0
   459 ;; Data sizes:     COMMON   BANK0   BANK1
   460 ;;      Params:         0       0       0
   461 ;;      Locals:         0       0       0
   462 ;;      Temps:          0       2       0
   463 ;;      Totals:         0       2       0
   464 ;;Total ram usage:        2 bytes
   465 ;; Hardware stack levels required when called:    4
   466 ;; This function calls:
   467 ;;		_badgeLeds
   468 ;;		_initializeVars
   469 ;;		_rand
   470 ;; This function is called by:
   471 ;;		Startup code after reset
   472 ;; This function uses a non-reentrant model
   473 ;;
   474                           
   475                           
   476                           ;psect for function _main
   477  0050                     _main:	
   478                           
   479                           ;main.c: 168: OSCCON = 0b11110000;
   480                           
   481                           ;incstack = 0
   482                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   483  0050  30F0               	movlw	240
   484  0051  0021               	movlb	1	; select bank1
   485  0052  0099               	movwf	25	;volatile
   486                           
   487                           ;main.c: 169: TRISA = 0b00001000;
   488  0053  3008               	movlw	8
   489  0054  008C               	movwf	12	;volatile
   490                           
   491                           ;main.c: 170: ANSELA = 0b00000000;
   492  0055  0023               	movlb	3	; select bank3
   493  0056  018C               	clrf	12	;volatile
   494                           
   495                           ;main.c: 171: WPUA = 0b00001000;
   496  0057  3008               	movlw	8
   497  0058  0024               	movlb	4	; select bank4
   498  0059  008C               	movwf	12	;volatile
   499                           
   500                           ;main.c: 172: OPTION_REGbits.nWPUEN = 0;
   501  005A  0021               	movlb	1	; select bank1
   502  005B  1395               	bcf	21,7	;volatile
   503                           
   504                           ;main.c: 173: initializeVars();
   505  005C  230C               	fcall	_initializeVars
   506                           
   507                           ;main.c: 174: INTCONbits.PEIE = 1;
   508  005D  170B               	bsf	11,6	;volatile
   509                           
   510                           ;main.c: 175: IOCANbits.IOCAN3 = 1;
   511  005E  0027               	movlb	7	; select bank7
   512  005F  1592               	bsf	18,3	;volatile
   513                           
   514                           ;main.c: 176: INTCON = 0b01001000;
   515  0060  3048               	movlw	72
   516  0061  008B               	movwf	11	;volatile
   517                           
   518                           ;main.c: 177: T1CON = 0b01000100;
   519  0062  3044               	movlw	68
   520  0063  0020               	movlb	0	; select bank0
   521  0064  0098               	movwf	24	;volatile
   522                           
   523                           ;main.c: 178: PIE1bits.TMR1IE = 1;
   524  0065  0021               	movlb	1	; select bank1
   525  0066  1411               	bsf	17,0	;volatile
   526                           
   527                           ;main.c: 179: T1CONbits.TMR1ON = 1;
   528  0067  0020               	movlb	0	; select bank0
   529  0068  1418               	bsf	24,0	;volatile
   530                           
   531                           ;main.c: 180: INTCONbits.GIE = 1;
   532  0069  178B               	bsf	11,7	;volatile
   533  006A                     l1310:	
   534                           
   535                           ;main.c: 183: if (debounce == 1) {
   536  006A  0020               	movlb	0	; select bank0
   537  006B  0329               	decf	_debounce,w	;volatile
   538  006C  1D03               	btfss	3,2
   539  006D  29CF               	goto	l1528
   540                           
   541                           ;main.c: 184: badgeLeds(0);
   542  006E  3000               	movlw	0
   543  006F  2257               	fcall	_badgeLeds
   544                           
   545                           ;main.c: 185: steps = 0;
   546  0070  01AA               	clrf	_steps	;volatile
   547                           
   548                           ;main.c: 186: _delay((unsigned long)((450)*(32000000/4000.0)));
   549  0071  3013               	movlw	19
   550  0072  0020               	movlb	0	; select bank0
   551  0073  00B3               	movwf	??_main+1
   552  0074  3044               	movlw	68
   553  0075  00B2               	movwf	??_main
   554  0076  3044               	movlw	68
   555  0077                     u1597:	
   556  0077  0B89               	decfsz	9,f
   557  0078  2877               	goto	u1597
   558  0079  0BB2               	decfsz	??_main,f
   559  007A  2877               	goto	u1597
   560  007B  0BB3               	decfsz	??_main+1,f
   561  007C  2877               	goto	u1597
   562  007D  0000               	nop
   563                           
   564                           ;main.c: 187: debounce = 0;
   565  007E  0020               	movlb	0	; select bank0
   566  007F  01A9               	clrf	_debounce	;volatile
   567                           
   568                           ;main.c: 188: } else {
   569  0080  29EC               	goto	l1530
   570  0081                     l82:	
   571                           ;main.c: 190: case 1:
   572                           
   573                           
   574                           ;main.c: 191: T1CONbits.TMR1ON = 0;
   575  0081  1018               	bcf	24,0	;volatile
   576                           
   577                           ;main.c: 192: TRISA = 0b00111111;
   578  0082  303F               	movlw	63
   579  0083  0021               	movlb	1	; select bank1
   580  0084  008C               	movwf	12	;volatile
   581  0085  0063               	sleep	;# 
   582                           
   583                           ;main.c: 194: break;
   584  0086  29EC               	goto	l1530
   585  0087                     l84:	
   586                           ;main.c: 195: case 2:
   587                           
   588                           
   589                           ;main.c: 196: T1CONbits.TMR1ON = 1;
   590  0087  1418               	bsf	24,0	;volatile
   591                           
   592                           ;main.c: 197: badgeLeds(0b11111111);
   593  0088  30FF               	movlw	255
   594  0089  2257               	fcall	_badgeLeds
   595                           
   596                           ;main.c: 198: break;
   597  008A  29EC               	goto	l1530
   598  008B                     l85:	
   599                           ;main.c: 199: case 3:
   600                           
   601                           
   602                           ;main.c: 200: T1CONbits.TMR1ON = 1;
   603  008B  1418               	bsf	24,0	;volatile
   604                           
   605                           ;main.c: 201: badgeLeds(0b11111100);
   606  008C  30FC               	movlw	252
   607  008D  2257               	fcall	_badgeLeds
   608                           
   609                           ;main.c: 202: break;
   610  008E  29EC               	goto	l1530
   611  008F                     l86:	
   612                           ;main.c: 203: case 4:
   613                           
   614                           
   615                           ;main.c: 204: T1CONbits.TMR1ON = 1;
   616  008F  1418               	bsf	24,0	;volatile
   617                           
   618                           ;main.c: 205: badgeLeds(0b00000011);
   619  0090  3003               	movlw	3
   620  0091  2257               	fcall	_badgeLeds
   621                           
   622                           ;main.c: 206: break;
   623  0092  29EC               	goto	l1530
   624  0093                     l87:	
   625                           ;main.c: 207: case 5:
   626                           
   627                           
   628                           ;main.c: 208: T1CONbits.TMR1ON = 1;
   629  0093  1418               	bsf	24,0	;volatile
   630                           
   631                           ;main.c: 209: if (steps >= 0 && steps <= 4) {
   632  0094  3005               	movlw	5
   633  0095  022A               	subwf	_steps,w	;volatile
   634  0096  1803               	skipnc
   635  0097  289A               	goto	l1332
   636                           
   637                           ;main.c: 210: badgeLeds(0b10000010);
   638  0098  3082               	movlw	130
   639  0099  2257               	fcall	_badgeLeds
   640  009A                     l1332:	
   641                           
   642                           ;main.c: 211: };main.c: 212: if (steps >= 5 && steps <= 9) {
   643  009A  3005               	movlw	5
   644  009B  022A               	subwf	_steps,w	;volatile
   645  009C  1C03               	skipc
   646  009D  28A4               	goto	l1338
   647  009E  300A               	movlw	10
   648  009F  022A               	subwf	_steps,w	;volatile
   649  00A0  1803               	skipnc
   650  00A1  28A4               	goto	l1338
   651                           
   652                           ;main.c: 213: badgeLeds(0b01000001);
   653  00A2  3041               	movlw	65
   654  00A3  2257               	fcall	_badgeLeds
   655  00A4                     l1338:	
   656                           
   657                           ;main.c: 214: };main.c: 215: if (steps >= 10 && steps <= 14) {
   658  00A4  300A               	movlw	10
   659  00A5  022A               	subwf	_steps,w	;volatile
   660  00A6  1C03               	skipc
   661  00A7  28AE               	goto	l1344
   662  00A8  300F               	movlw	15
   663  00A9  022A               	subwf	_steps,w	;volatile
   664  00AA  1803               	skipnc
   665  00AB  28AE               	goto	l1344
   666                           
   667                           ;main.c: 216: badgeLeds(0b00100010);
   668  00AC  3022               	movlw	34
   669  00AD  2257               	fcall	_badgeLeds
   670  00AE                     l1344:	
   671                           
   672                           ;main.c: 217: };main.c: 218: if (steps >= 15 && steps <= 19) {
   673  00AE  300F               	movlw	15
   674  00AF  022A               	subwf	_steps,w	;volatile
   675  00B0  1C03               	skipc
   676  00B1  28B8               	goto	l1350
   677  00B2  3014               	movlw	20
   678  00B3  022A               	subwf	_steps,w	;volatile
   679  00B4  1803               	skipnc
   680  00B5  28B8               	goto	l1350
   681                           
   682                           ;main.c: 219: badgeLeds(0b00010001);
   683  00B6  3011               	movlw	17
   684  00B7  2257               	fcall	_badgeLeds
   685  00B8                     l1350:	
   686                           
   687                           ;main.c: 220: };main.c: 221: if (steps >= 20 && steps <= 24) {
   688  00B8  3014               	movlw	20
   689  00B9  022A               	subwf	_steps,w	;volatile
   690  00BA  1C03               	skipc
   691  00BB  28C2               	goto	l1356
   692  00BC  3019               	movlw	25
   693  00BD  022A               	subwf	_steps,w	;volatile
   694  00BE  1803               	skipnc
   695  00BF  28C2               	goto	l1356
   696                           
   697                           ;main.c: 222: badgeLeds(0b00001010);
   698  00C0  300A               	movlw	10
   699  00C1  2257               	fcall	_badgeLeds
   700  00C2                     l1356:	
   701                           
   702                           ;main.c: 223: };main.c: 224: if (steps >= 25 && steps <= 29) {
   703  00C2  3019               	movlw	25
   704  00C3  022A               	subwf	_steps,w	;volatile
   705  00C4  1C03               	skipc
   706  00C5  28CC               	goto	l1362
   707  00C6  301E               	movlw	30
   708  00C7  022A               	subwf	_steps,w	;volatile
   709  00C8  1803               	skipnc
   710  00C9  28CC               	goto	l1362
   711                           
   712                           ;main.c: 225: badgeLeds(0b00000101);
   713  00CA  3005               	movlw	5
   714  00CB                     L2:	
   715  00CB  2257               	fcall	_badgeLeds
   716  00CC                     l1362:	
   717                           
   718                           ;main.c: 226: };main.c: 227: steps++;
   719  00CC  3001               	movlw	1
   720  00CD  00B2               	movwf	??_main
   721  00CE  0832               	movf	??_main,w
   722  00CF  07AA               	addwf	_steps,f	;volatile
   723                           
   724                           ;main.c: 228: if (steps >= 30) {
   725  00D0  301E               	movlw	30
   726  00D1                     L1:	
   727  00D1  022A               	subwf	_steps,w	;volatile
   728  00D2  1C03               	skipc
   729  00D3  29EC               	goto	l1530
   730                           
   731                           ;main.c: 229: steps = 0;
   732  00D4  01AA               	clrf	_steps	;volatile
   733  00D5  29EC               	goto	l1530
   734  00D6                     l95:	
   735                           ;main.c: 232: case 6:
   736                           
   737                           
   738                           ;main.c: 233: T1CONbits.TMR1ON = 1;
   739  00D6  1418               	bsf	24,0	;volatile
   740                           
   741                           ;main.c: 234: if (steps >= 0 && steps <= 4) {
   742  00D7  3005               	movlw	5
   743  00D8  022A               	subwf	_steps,w	;volatile
   744  00D9  1803               	skipnc
   745  00DA  28DD               	goto	l1372
   746                           
   747                           ;main.c: 235: badgeLeds(0b00000101);
   748  00DB  3005               	movlw	5
   749  00DC  2257               	fcall	_badgeLeds
   750  00DD                     l1372:	
   751                           
   752                           ;main.c: 236: };main.c: 237: if (steps >= 5 && steps <= 9) {
   753  00DD  3005               	movlw	5
   754  00DE  022A               	subwf	_steps,w	;volatile
   755  00DF  1C03               	skipc
   756  00E0  28E7               	goto	l1378
   757  00E1  300A               	movlw	10
   758  00E2  022A               	subwf	_steps,w	;volatile
   759  00E3  1803               	skipnc
   760  00E4  28E7               	goto	l1378
   761                           
   762                           ;main.c: 238: badgeLeds(0b00001010);
   763  00E5  300A               	movlw	10
   764  00E6  2257               	fcall	_badgeLeds
   765  00E7                     l1378:	
   766                           
   767                           ;main.c: 239: };main.c: 240: if (steps >= 10 && steps <= 14) {
   768  00E7  300A               	movlw	10
   769  00E8  022A               	subwf	_steps,w	;volatile
   770  00E9  1C03               	skipc
   771  00EA  28F1               	goto	l1384
   772  00EB  300F               	movlw	15
   773  00EC  022A               	subwf	_steps,w	;volatile
   774  00ED  1803               	skipnc
   775  00EE  28F1               	goto	l1384
   776                           
   777                           ;main.c: 241: badgeLeds(0b00010001);
   778  00EF  3011               	movlw	17
   779  00F0  2257               	fcall	_badgeLeds
   780  00F1                     l1384:	
   781                           
   782                           ;main.c: 242: };main.c: 243: if (steps >= 15 && steps <= 19) {
   783  00F1  300F               	movlw	15
   784  00F2  022A               	subwf	_steps,w	;volatile
   785  00F3  1C03               	skipc
   786  00F4  28FB               	goto	l1390
   787  00F5  3014               	movlw	20
   788  00F6  022A               	subwf	_steps,w	;volatile
   789  00F7  1803               	skipnc
   790  00F8  28FB               	goto	l1390
   791                           
   792                           ;main.c: 244: badgeLeds(0b00100010);
   793  00F9  3022               	movlw	34
   794  00FA  2257               	fcall	_badgeLeds
   795  00FB                     l1390:	
   796                           
   797                           ;main.c: 245: };main.c: 246: if (steps >= 20 && steps <= 24) {
   798  00FB  3014               	movlw	20
   799  00FC  022A               	subwf	_steps,w	;volatile
   800  00FD  1C03               	skipc
   801  00FE  2905               	goto	l1396
   802  00FF  3019               	movlw	25
   803  0100  022A               	subwf	_steps,w	;volatile
   804  0101  1803               	skipnc
   805  0102  2905               	goto	l1396
   806                           
   807                           ;main.c: 247: badgeLeds(0b01000001);
   808  0103  3041               	movlw	65
   809  0104  2257               	fcall	_badgeLeds
   810  0105                     l1396:	
   811                           
   812                           ;main.c: 248: };main.c: 249: if (steps >= 25 && steps <= 29) {
   813  0105  3019               	movlw	25
   814  0106  022A               	subwf	_steps,w	;volatile
   815  0107  1C03               	skipc
   816  0108  28CC               	goto	l1362
   817  0109  301E               	movlw	30
   818  010A  022A               	subwf	_steps,w	;volatile
   819  010B  1803               	skipnc
   820  010C  28CC               	goto	l1362
   821                           
   822                           ;main.c: 250: badgeLeds(0b10000010);
   823  010D  3082               	movlw	130
   824  010E  28CB               	goto	L2
   825  010F                     l103:	
   826                           ;main.c: 257: case 7:
   827                           
   828                           ;main.c: 253: if (steps >= 30) {
   829                           
   830                           ;main.c: 251: };main.c: 252: steps++;
   831                           
   832                           
   833                           ;main.c: 258: T1CONbits.TMR1ON = 1;
   834  010F  1418               	bsf	24,0	;volatile
   835                           
   836                           ;main.c: 259: if (steps >= 0 && steps <= 4) {
   837  0110  3005               	movlw	5
   838  0111  022A               	subwf	_steps,w	;volatile
   839  0112  1803               	skipnc
   840  0113  2916               	goto	l1412
   841                           
   842                           ;main.c: 260: badgeLeds(0b00000111);
   843  0114  3007               	movlw	7
   844  0115  2257               	fcall	_badgeLeds
   845  0116                     l1412:	
   846                           
   847                           ;main.c: 261: };main.c: 262: if (steps >= 5 && steps <= 9) {
   848  0116  3005               	movlw	5
   849  0117  022A               	subwf	_steps,w	;volatile
   850  0118  1C03               	skipc
   851  0119  2920               	goto	l1418
   852  011A  300A               	movlw	10
   853  011B  022A               	subwf	_steps,w	;volatile
   854  011C  1803               	skipnc
   855  011D  2920               	goto	l1418
   856                           
   857                           ;main.c: 263: badgeLeds(0b00001011);
   858  011E  300B               	movlw	11
   859  011F  2257               	fcall	_badgeLeds
   860  0120                     l1418:	
   861                           
   862                           ;main.c: 264: };main.c: 265: if (steps >= 10 && steps <= 14) {
   863  0120  300A               	movlw	10
   864  0121  022A               	subwf	_steps,w	;volatile
   865  0122  1C03               	skipc
   866  0123  292A               	goto	l1424
   867  0124  300F               	movlw	15
   868  0125  022A               	subwf	_steps,w	;volatile
   869  0126  1803               	skipnc
   870  0127  292A               	goto	l1424
   871                           
   872                           ;main.c: 266: badgeLeds(0b00010011);
   873  0128  3013               	movlw	19
   874  0129  2257               	fcall	_badgeLeds
   875  012A                     l1424:	
   876                           
   877                           ;main.c: 267: };main.c: 268: if (steps >= 15 && steps <= 19) {
   878  012A  300F               	movlw	15
   879  012B  022A               	subwf	_steps,w	;volatile
   880  012C  1C03               	skipc
   881  012D  2934               	goto	l1430
   882  012E  3014               	movlw	20
   883  012F  022A               	subwf	_steps,w	;volatile
   884  0130  1803               	skipnc
   885  0131  2934               	goto	l1430
   886                           
   887                           ;main.c: 269: badgeLeds(0b00100011);
   888  0132  3023               	movlw	35
   889  0133  2257               	fcall	_badgeLeds
   890  0134                     l1430:	
   891                           
   892                           ;main.c: 270: };main.c: 271: if (steps >= 20 && steps <= 24) {
   893  0134  3014               	movlw	20
   894  0135  022A               	subwf	_steps,w	;volatile
   895  0136  1C03               	skipc
   896  0137  293E               	goto	l1436
   897  0138  3019               	movlw	25
   898  0139  022A               	subwf	_steps,w	;volatile
   899  013A  1803               	skipnc
   900  013B  293E               	goto	l1436
   901                           
   902                           ;main.c: 272: badgeLeds(0b01000011);
   903  013C  3043               	movlw	67
   904  013D  2257               	fcall	_badgeLeds
   905  013E                     l1436:	
   906                           
   907                           ;main.c: 273: };main.c: 274: if (steps >= 25 && steps <= 29) {
   908  013E  3019               	movlw	25
   909  013F  022A               	subwf	_steps,w	;volatile
   910  0140  1C03               	skipc
   911  0141  2948               	goto	l1442
   912  0142  301E               	movlw	30
   913  0143  022A               	subwf	_steps,w	;volatile
   914  0144  1803               	skipnc
   915  0145  2948               	goto	l1442
   916                           
   917                           ;main.c: 275: badgeLeds(0b10000000);
   918  0146  3080               	movlw	128
   919  0147  2257               	fcall	_badgeLeds
   920  0148                     l1442:	
   921                           
   922                           ;main.c: 276: };main.c: 277: if (steps >= 30 && steps <= 34) {
   923  0148  301E               	movlw	30
   924  0149  022A               	subwf	_steps,w	;volatile
   925  014A  1C03               	skipc
   926  014B  2952               	goto	l1448
   927  014C  3023               	movlw	35
   928  014D  022A               	subwf	_steps,w	;volatile
   929  014E  1803               	skipnc
   930  014F  2952               	goto	l1448
   931                           
   932                           ;main.c: 278: badgeLeds(0b10000011);
   933  0150  3083               	movlw	131
   934  0151  2257               	fcall	_badgeLeds
   935  0152                     l1448:	
   936                           
   937                           ;main.c: 279: };main.c: 280: if (steps >= 35 && steps <= 39) {
   938  0152  3023               	movlw	35
   939  0153  022A               	subwf	_steps,w	;volatile
   940  0154  1C03               	skipc
   941  0155  295C               	goto	l1454
   942  0156  3028               	movlw	40
   943  0157  022A               	subwf	_steps,w	;volatile
   944  0158  1803               	skipnc
   945  0159  295C               	goto	l1454
   946                           
   947                           ;main.c: 281: badgeLeds(0b01000011);
   948  015A  3043               	movlw	67
   949  015B  2257               	fcall	_badgeLeds
   950  015C                     l1454:	
   951                           
   952                           ;main.c: 282: };main.c: 283: if (steps >= 40 && steps <= 44) {
   953  015C  3028               	movlw	40
   954  015D  022A               	subwf	_steps,w	;volatile
   955  015E  1C03               	skipc
   956  015F  2966               	goto	l1460
   957  0160  302D               	movlw	45
   958  0161  022A               	subwf	_steps,w	;volatile
   959  0162  1803               	skipnc
   960  0163  2966               	goto	l1460
   961                           
   962                           ;main.c: 284: badgeLeds(0b00100011);
   963  0164  3023               	movlw	35
   964  0165  2257               	fcall	_badgeLeds
   965  0166                     l1460:	
   966                           
   967                           ;main.c: 285: };main.c: 286: if (steps >= 45 && steps <= 49) {
   968  0166  302D               	movlw	45
   969  0167  022A               	subwf	_steps,w	;volatile
   970  0168  1C03               	skipc
   971  0169  2970               	goto	l1466
   972  016A  3032               	movlw	50
   973  016B  022A               	subwf	_steps,w	;volatile
   974  016C  1803               	skipnc
   975  016D  2970               	goto	l1466
   976                           
   977                           ;main.c: 287: badgeLeds(0b00010011);
   978  016E  3013               	movlw	19
   979  016F  2257               	fcall	_badgeLeds
   980  0170                     l1466:	
   981                           
   982                           ;main.c: 288: };main.c: 289: if (steps >= 50 && steps <= 54) {
   983  0170  3032               	movlw	50
   984  0171  022A               	subwf	_steps,w	;volatile
   985  0172  1C03               	skipc
   986  0173  297A               	goto	l1472
   987  0174  3037               	movlw	55
   988  0175  022A               	subwf	_steps,w	;volatile
   989  0176  1803               	skipnc
   990  0177  297A               	goto	l1472
   991                           
   992                           ;main.c: 290: badgeLeds(0b00001011);
   993  0178  300B               	movlw	11
   994  0179  2257               	fcall	_badgeLeds
   995  017A                     l1472:	
   996                           
   997                           ;main.c: 291: };main.c: 292: if (steps >= 55 && steps <= 59) {
   998  017A  3037               	movlw	55
   999  017B  022A               	subwf	_steps,w	;volatile
  1000  017C  1C03               	skipc
  1001  017D  2984               	goto	l1478
  1002  017E  303C               	movlw	60
  1003  017F  022A               	subwf	_steps,w	;volatile
  1004  0180  1803               	skipnc
  1005  0181  2984               	goto	l1478
  1006                           
  1007                           ;main.c: 293: badgeLeds(0b00000100);
  1008  0182  3004               	movlw	4
  1009  0183  2257               	fcall	_badgeLeds
  1010  0184                     l1478:	
  1011                           
  1012                           ;main.c: 294: };main.c: 295: steps = steps + 2;
  1013  0184  082A               	movf	_steps,w	;volatile
  1014  0185  3E02               	addlw	2
  1015  0186  00B2               	movwf	??_main
  1016  0187  0832               	movf	??_main,w
  1017  0188  00AA               	movwf	_steps	;volatile
  1018                           
  1019                           ;main.c: 296: if (steps >= 60) {
  1020  0189  303C               	movlw	60
  1021  018A  28D1               	goto	L1
  1022  018B                     l117:	
  1023                           ;main.c: 300: case 8:
  1024                           
  1025                           
  1026                           ;main.c: 301: T1CONbits.TMR1ON = 1;
  1027  018B  1418               	bsf	24,0	;volatile
  1028                           
  1029                           ;main.c: 302: if (steps >= 0 && steps <= 3) {
  1030  018C  3004               	movlw	4
  1031  018D  022A               	subwf	_steps,w	;volatile
  1032  018E  1803               	skipnc
  1033  018F  2992               	goto	l1488
  1034                           
  1035                           ;main.c: 303: badgeLeds(0b00110011);
  1036  0190  3033               	movlw	51
  1037  0191  2257               	fcall	_badgeLeds
  1038  0192                     l1488:	
  1039                           
  1040                           ;main.c: 304: };main.c: 305: if (steps >= 4 && steps <= 7) {
  1041  0192  3004               	movlw	4
  1042  0193  022A               	subwf	_steps,w	;volatile
  1043  0194  1C03               	skipc
  1044  0195  299C               	goto	l1494
  1045  0196  3008               	movlw	8
  1046  0197  022A               	subwf	_steps,w	;volatile
  1047  0198  1803               	skipnc
  1048  0199  299C               	goto	l1494
  1049                           
  1050                           ;main.c: 306: badgeLeds(0b01001000);
  1051  019A  3048               	movlw	72
  1052  019B  2257               	fcall	_badgeLeds
  1053  019C                     l1494:	
  1054                           
  1055                           ;main.c: 307: };main.c: 308: if (steps >= 8 && steps <= 11) {
  1056  019C  3008               	movlw	8
  1057  019D  022A               	subwf	_steps,w	;volatile
  1058  019E  1C03               	skipc
  1059  019F  29A6               	goto	l1500
  1060  01A0  300C               	movlw	12
  1061  01A1  022A               	subwf	_steps,w	;volatile
  1062  01A2  1803               	skipnc
  1063  01A3  29A6               	goto	l1500
  1064                           
  1065                           ;main.c: 309: badgeLeds(0b10000110);
  1066  01A4  3086               	movlw	134
  1067  01A5  2257               	fcall	_badgeLeds
  1068  01A6                     l1500:	
  1069                           
  1070                           ;main.c: 310: };main.c: 311: if (steps >= 12 && steps <= 15) {
  1071  01A6  300C               	movlw	12
  1072  01A7  022A               	subwf	_steps,w	;volatile
  1073  01A8  1C03               	skipc
  1074  01A9  29B0               	goto	l1506
  1075  01AA  3010               	movlw	16
  1076  01AB  022A               	subwf	_steps,w	;volatile
  1077  01AC  1803               	skipnc
  1078  01AD  29B0               	goto	l1506
  1079                           
  1080                           ;main.c: 312: badgeLeds(0b10000101);
  1081  01AE  3085               	movlw	133
  1082  01AF  2257               	fcall	_badgeLeds
  1083  01B0                     l1506:	
  1084                           
  1085                           ;main.c: 313: };main.c: 314: if (steps >= 16 && steps <= 19) {
  1086  01B0  3010               	movlw	16
  1087  01B1  022A               	subwf	_steps,w	;volatile
  1088  01B2  1C03               	skipc
  1089  01B3  29BA               	goto	l1512
  1090  01B4  3014               	movlw	20
  1091  01B5  022A               	subwf	_steps,w	;volatile
  1092  01B6  1803               	skipnc
  1093  01B7  29BA               	goto	l1512
  1094                           
  1095                           ;main.c: 315: badgeLeds(0b01001011);
  1096  01B8  304B               	movlw	75
  1097  01B9  2257               	fcall	_badgeLeds
  1098  01BA                     l1512:	
  1099                           
  1100                           ;main.c: 316: };main.c: 317: if (steps >= 20 && steps <= 23) {
  1101  01BA  3014               	movlw	20
  1102  01BB  022A               	subwf	_steps,w	;volatile
  1103  01BC  1C03               	skipc
  1104  01BD  29C4               	goto	l1518
  1105  01BE  3018               	movlw	24
  1106  01BF  022A               	subwf	_steps,w	;volatile
  1107  01C0  1803               	skipnc
  1108  01C1  29C4               	goto	l1518
  1109                           
  1110                           ;main.c: 318: badgeLeds(0b00110000);
  1111  01C2  3030               	movlw	48
  1112  01C3  2257               	fcall	_badgeLeds
  1113  01C4                     l1518:	
  1114                           
  1115                           ;main.c: 319: };main.c: 320: steps++;
  1116  01C4  3001               	movlw	1
  1117  01C5  00B2               	movwf	??_main
  1118  01C6  0832               	movf	??_main,w
  1119  01C7  07AA               	addwf	_steps,f	;volatile
  1120                           
  1121                           ;main.c: 321: if (steps >= 24) {
  1122  01C8  3018               	movlw	24
  1123  01C9  28D1               	goto	L1
  1124  01CA                     l125:	
  1125                           ;main.c: 325: case 9:
  1126                           
  1127                           
  1128                           ;main.c: 326: T1CONbits.TMR1ON = 1;
  1129  01CA  1418               	bsf	24,0	;volatile
  1130                           
  1131                           ;main.c: 327: badgeLeds((unsigned char) rand());
  1132  01CB  22A5               	fcall	_rand
  1133  01CC  082B               	movf	?_rand,w
  1134  01CD  2257               	fcall	_badgeLeds
  1135                           
  1136                           ;main.c: 328: break;
  1137  01CE  29EC               	goto	l1530
  1138  01CF                     l1528:	
  1139  01CF  0838               	movf	_animation,w	;volatile
  1140                           
  1141                           ; Switch size 1, requested type "simple"
  1142                           ; Number of cases is 9, Range of values is 1 to 9
  1143                           ; switch strategies available:
  1144                           ; Name         Instructions Cycles
  1145                           ; direct_byte           27     9 (fixed)
  1146                           ; simple_byte           28    15 (average)
  1147                           ; jumptable            263     9 (fixed)
  1148                           ;	Chosen strategy is simple_byte
  1149  01D0  3A01               	xorlw	1	; case 1
  1150  01D1  1903               	skipnz
  1151  01D2  2881               	goto	l82
  1152  01D3  3A03               	xorlw	3	; case 2
  1153  01D4  1903               	skipnz
  1154  01D5  2887               	goto	l84
  1155  01D6  3A01               	xorlw	1	; case 3
  1156  01D7  1903               	skipnz
  1157  01D8  288B               	goto	l85
  1158  01D9  3A07               	xorlw	7	; case 4
  1159  01DA  1903               	skipnz
  1160  01DB  288F               	goto	l86
  1161  01DC  3A01               	xorlw	1	; case 5
  1162  01DD  1903               	skipnz
  1163  01DE  2893               	goto	l87
  1164  01DF  3A03               	xorlw	3	; case 6
  1165  01E0  1903               	skipnz
  1166  01E1  28D6               	goto	l95
  1167  01E2  3A01               	xorlw	1	; case 7
  1168  01E3  1903               	skipnz
  1169  01E4  290F               	goto	l103
  1170  01E5  3A0F               	xorlw	15	; case 8
  1171  01E6  1903               	skipnz
  1172  01E7  298B               	goto	l117
  1173  01E8  3A01               	xorlw	1	; case 9
  1174  01E9  1903               	skipnz
  1175  01EA  29CA               	goto	l125
  1176  01EB  29EC               	goto	l1530
  1177  01EC                     l1530:	
  1178                           
  1179                           ;main.c: 330: };main.c: 331: _delay((unsigned long)((50)*(32000000/4000.0)));
  1180  01EC  3003               	movlw	3
  1181  01ED  0020               	movlb	0	; select bank0
  1182  01EE  00B3               	movwf	??_main+1
  1183  01EF  3008               	movlw	8
  1184  01F0  00B2               	movwf	??_main
  1185  01F1  3077               	movlw	119
  1186  01F2                     u1607:	
  1187  01F2  0B89               	decfsz	9,f
  1188  01F3  29F2               	goto	u1607
  1189  01F4  0BB2               	decfsz	??_main,f
  1190  01F5  29F2               	goto	u1607
  1191  01F6  0BB3               	decfsz	??_main+1,f
  1192  01F7  29F2               	goto	u1607
  1193  01F8  286A               	goto	l1310
  1194  01F9                     __end_of_main:	
  1195                           
  1196                           	psect	text1
  1197  02A5                     __ptext1:	
  1198 ;; *************** function _rand *****************
  1199 ;; Defined at:
  1200 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\rand.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;		None
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;		None
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  2    0[BANK0 ] int 
  1207 ;; Registers used:
  1208 ;;		wreg, status,2, status,0, pclath, cstack
  1209 ;; Tracked objects:
  1210 ;;		On entry : 1F/0
  1211 ;;		On exit  : 1F/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMMON   BANK0   BANK1
  1214 ;;      Params:         0       2       0
  1215 ;;      Locals:         0       0       0
  1216 ;;      Temps:          0       5       0
  1217 ;;      Totals:         0       7       0
  1218 ;;Total ram usage:        7 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    3
  1221 ;; This function calls:
  1222 ;;		___lmul
  1223 ;; This function is called by:
  1224 ;;		_main
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           
  1229                           ;psect for function _rand
  1230  02A5                     _rand:	
  1231                           
  1232                           ;incstack = 0
  1233                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  1234  02A5  0837               	movf	_randx+3,w
  1235  02A6  00F4               	movwf	___lmul@multiplier+3
  1236  02A7  0836               	movf	_randx+2,w
  1237  02A8  00F3               	movwf	___lmul@multiplier+2
  1238  02A9  0835               	movf	_randx+1,w
  1239  02AA  00F2               	movwf	___lmul@multiplier+1
  1240  02AB  0834               	movf	_randx,w
  1241  02AC  00F1               	movwf	___lmul@multiplier
  1242  02AD  3041               	movlw	65
  1243  02AE  00F8               	movwf	___lmul@multiplicand+3
  1244  02AF  30C6               	movlw	198
  1245  02B0  00F7               	movwf	___lmul@multiplicand+2
  1246  02B1  304E               	movlw	78
  1247  02B2  00F6               	movwf	___lmul@multiplicand+1
  1248  02B3  306D               	movlw	109
  1249  02B4  00F5               	movwf	___lmul@multiplicand
  1250  02B5  22DD               	fcall	___lmul
  1251  02B6  0874               	movf	?___lmul+3,w
  1252  02B7  00B7               	movwf	_randx+3
  1253  02B8  0873               	movf	?___lmul+2,w
  1254  02B9  00B6               	movwf	_randx+2
  1255  02BA  0872               	movf	?___lmul+1,w
  1256  02BB  00B5               	movwf	_randx+1
  1257  02BC  0871               	movf	?___lmul,w
  1258  02BD  00B4               	movwf	_randx
  1259  02BE  3039               	movlw	57
  1260  02BF  07B4               	addwf	_randx,f
  1261  02C0  3030               	movlw	48
  1262  02C1  3DB5               	addwfc	_randx+1,f
  1263  02C2  3000               	movlw	0
  1264  02C3  3DB6               	addwfc	_randx+2,f
  1265  02C4  3000               	movlw	0
  1266  02C5  3DB7               	addwfc	_randx+3,f
  1267  02C6  0834               	movf	_randx,w
  1268  02C7  00AD               	movwf	??_rand
  1269  02C8  0835               	movf	_randx+1,w
  1270  02C9  00AE               	movwf	??_rand+1
  1271  02CA  0836               	movf	_randx+2,w
  1272  02CB  00AF               	movwf	??_rand+2
  1273  02CC  0837               	movf	_randx+3,w
  1274  02CD  00B0               	movwf	??_rand+3
  1275  02CE  3010               	movlw	16
  1276  02CF  00B1               	movwf	??_rand+4
  1277  02D0                     u915:	
  1278  02D0  37B0               	asrf	??_rand+3,f
  1279  02D1  0CAF               	rrf	??_rand+2,f
  1280  02D2  0CAE               	rrf	??_rand+1,f
  1281  02D3  0CAD               	rrf	??_rand,f
  1282  02D4  0BB1               	decfsz	??_rand+4,f
  1283  02D5  2AD0               	goto	u915
  1284  02D6  30FF               	movlw	255
  1285  02D7  052D               	andwf	??_rand,w
  1286  02D8  00AB               	movwf	?_rand
  1287  02D9  307F               	movlw	127
  1288  02DA  052E               	andwf	??_rand+1,w
  1289  02DB  00AC               	movwf	?_rand+1
  1290  02DC  0008               	return
  1291  02DD                     __end_of_rand:	
  1292                           
  1293                           	psect	text2
  1294  02DD                     __ptext2:	
  1295 ;; *************** function ___lmul *****************
  1296 ;; Defined at:
  1297 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul32.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;  multiplier      4    1[COMMON] unsigned long 
  1300 ;;  multiplicand    4    5[COMMON] unsigned long 
  1301 ;; Auto vars:     Size  Location     Type
  1302 ;;  product         4    9[COMMON] unsigned long 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  4    1[COMMON] unsigned long 
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, status,0
  1307 ;; Tracked objects:
  1308 ;;		On entry : 1F/0
  1309 ;;		On exit  : 1F/0
  1310 ;;		Unchanged: 1F/0
  1311 ;; Data sizes:     COMMON   BANK0   BANK1
  1312 ;;      Params:         8       0       0
  1313 ;;      Locals:         4       0       0
  1314 ;;      Temps:          0       0       0
  1315 ;;      Totals:        12       0       0
  1316 ;;Total ram usage:       12 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    2
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_rand
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           
  1327                           ;psect for function ___lmul
  1328  02DD                     ___lmul:	
  1329                           
  1330                           ;incstack = 0
  1331                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1332  02DD  3000               	movlw	0
  1333  02DE  00FC               	movwf	___lmul@product+3
  1334  02DF  3000               	movlw	0
  1335  02E0  00FB               	movwf	___lmul@product+2
  1336  02E1  3000               	movlw	0
  1337  02E2  00FA               	movwf	___lmul@product+1
  1338  02E3  3000               	movlw	0
  1339  02E4  00F9               	movwf	___lmul@product
  1340  02E5                     l1164:	
  1341  02E5  1C71               	btfss	___lmul@multiplier,0
  1342  02E6  2AEF               	goto	l1168
  1343  02E7  0875               	movf	___lmul@multiplicand,w
  1344  02E8  07F9               	addwf	___lmul@product,f
  1345  02E9  0876               	movf	___lmul@multiplicand+1,w
  1346  02EA  3DFA               	addwfc	___lmul@product+1,f
  1347  02EB  0877               	movf	___lmul@multiplicand+2,w
  1348  02EC  3DFB               	addwfc	___lmul@product+2,f
  1349  02ED  0878               	movf	___lmul@multiplicand+3,w
  1350  02EE  3DFC               	addwfc	___lmul@product+3,f
  1351  02EF                     l1168:	
  1352  02EF  3001               	movlw	1
  1353  02F0                     u815:	
  1354  02F0  35F5               	lslf	___lmul@multiplicand,f
  1355  02F1  0DF6               	rlf	___lmul@multiplicand+1,f
  1356  02F2  0DF7               	rlf	___lmul@multiplicand+2,f
  1357  02F3  0DF8               	rlf	___lmul@multiplicand+3,f
  1358  02F4  0B89               	decfsz	9,f
  1359  02F5  2AF0               	goto	u815
  1360  02F6  3001               	movlw	1
  1361  02F7                     u825:	
  1362  02F7  36F4               	lsrf	___lmul@multiplier+3,f
  1363  02F8  0CF3               	rrf	___lmul@multiplier+2,f
  1364  02F9  0CF2               	rrf	___lmul@multiplier+1,f
  1365  02FA  0CF1               	rrf	___lmul@multiplier,f
  1366  02FB  0B89               	decfsz	9,f
  1367  02FC  2AF7               	goto	u825
  1368  02FD  0874               	movf	___lmul@multiplier+3,w
  1369  02FE  0473               	iorwf	___lmul@multiplier+2,w
  1370  02FF  0472               	iorwf	___lmul@multiplier+1,w
  1371  0300  0471               	iorwf	___lmul@multiplier,w
  1372  0301  1D03               	skipz
  1373  0302  2AE5               	goto	l1164
  1374  0303  087C               	movf	___lmul@product+3,w
  1375  0304  00F4               	movwf	?___lmul+3
  1376  0305  087B               	movf	___lmul@product+2,w
  1377  0306  00F3               	movwf	?___lmul+2
  1378  0307  087A               	movf	___lmul@product+1,w
  1379  0308  00F2               	movwf	?___lmul+1
  1380  0309  0879               	movf	___lmul@product,w
  1381  030A  00F1               	movwf	?___lmul
  1382  030B  0008               	return
  1383  030C                     __end_of___lmul:	
  1384                           
  1385                           	psect	text3
  1386  030C                     __ptext3:	
  1387 ;; *************** function _initializeVars *****************
  1388 ;; Defined at:
  1389 ;;		line 106 in file "main.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;		None
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;		None
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, status,2
  1398 ;; Tracked objects:
  1399 ;;		On entry : B1F/1
  1400 ;;		On exit  : B1F/0
  1401 ;;		Unchanged: B00/0
  1402 ;; Data sizes:     COMMON   BANK0   BANK1
  1403 ;;      Params:         0       0       0
  1404 ;;      Locals:         0       0       0
  1405 ;;      Temps:          1       0       0
  1406 ;;      Totals:         1       0       0
  1407 ;;Total ram usage:        1 bytes
  1408 ;; Hardware stack levels used:    1
  1409 ;; Hardware stack levels required when called:    2
  1410 ;; This function calls:
  1411 ;;		Nothing
  1412 ;; This function is called by:
  1413 ;;		_main
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           
  1418                           ;psect for function _initializeVars
  1419  030C                     _initializeVars:	
  1420                           
  1421                           ;main.c: 107: position = 1;
  1422                           
  1423                           ;incstack = 0
  1424                           ; Regs used in _initializeVars: [wreg+status,2]
  1425  030C  3001               	movlw	1
  1426  030D  00F1               	movwf	??_initializeVars
  1427  030E  0871               	movf	??_initializeVars,w
  1428  030F  00FD               	movwf	_position	;volatile
  1429                           
  1430                           ;main.c: 108: animation = 2;
  1431  0310  3002               	movlw	2
  1432  0311  00F1               	movwf	??_initializeVars
  1433  0312  0871               	movf	??_initializeVars,w
  1434  0313  0020               	movlb	0	; select bank0
  1435  0314  00B8               	movwf	_animation	;volatile
  1436                           
  1437                           ;main.c: 109: steps = 0;
  1438  0315  01AA               	clrf	_steps	;volatile
  1439                           
  1440                           ;main.c: 110: debounce = 0;
  1441  0316  01A9               	clrf	_debounce	;volatile
  1442                           
  1443                           ;main.c: 111: Matrix.data.EN = 0;
  1444  0317  01A0               	clrf	_Matrix	;volatile
  1445                           
  1446                           ;main.c: 112: Matrix.data.L1 = 0;
  1447  0318  01A1               	clrf	_Matrix+1	;volatile
  1448                           
  1449                           ;main.c: 113: Matrix.data.L2 = 0;
  1450  0319  01A2               	clrf	_Matrix+2	;volatile
  1451                           
  1452                           ;main.c: 114: Matrix.data.L3 = 0;
  1453  031A  01A3               	clrf	_Matrix+3	;volatile
  1454                           
  1455                           ;main.c: 115: Matrix.data.L4 = 0;
  1456  031B  01A4               	clrf	_Matrix+4	;volatile
  1457                           
  1458                           ;main.c: 116: Matrix.data.L5 = 0;
  1459  031C  01A5               	clrf	_Matrix+5	;volatile
  1460                           
  1461                           ;main.c: 117: Matrix.data.L6 = 0;
  1462  031D  01A6               	clrf	_Matrix+6	;volatile
  1463                           
  1464                           ;main.c: 118: Matrix.data.L7 = 0;
  1465  031E  01A7               	clrf	_Matrix+7	;volatile
  1466                           
  1467                           ;main.c: 119: Matrix.data.L8 = 0;
  1468  031F  01A8               	clrf	_Matrix+8	;volatile
  1469  0320  0008               	return
  1470  0321                     __end_of_initializeVars:	
  1471                           
  1472                           	psect	text4
  1473  0257                     __ptext4:	
  1474 ;; *************** function _badgeLeds *****************
  1475 ;; Defined at:
  1476 ;;		line 122 in file "main.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  leds            1    wreg     unsigned char 
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;  leds            1    3[COMMON] unsigned char 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg, status,2, status,0
  1485 ;; Tracked objects:
  1486 ;;		On entry : 1F/0
  1487 ;;		On exit  : 1F/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMMON   BANK0   BANK1
  1490 ;;      Params:         0       0       0
  1491 ;;      Locals:         1       0       0
  1492 ;;      Temps:          2       0       0
  1493 ;;      Totals:         3       0       0
  1494 ;;Total ram usage:        3 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    2
  1497 ;; This function calls:
  1498 ;;		Nothing
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           
  1505                           ;psect for function _badgeLeds
  1506  0257                     _badgeLeds:	
  1507                           
  1508                           ;incstack = 0
  1509                           ; Regs used in _badgeLeds: [wreg+status,2+status,0]
  1510                           ;badgeLeds@leds stored from wreg
  1511  0257  00F3               	movwf	badgeLeds@leds
  1512                           
  1513                           ;main.c: 123: Matrix.data.L8 = (unsigned char) (0x01 & (leds >> 0));
  1514  0258  0873               	movf	badgeLeds@leds,w
  1515  0259  3901               	andlw	1
  1516  025A  00F1               	movwf	??_badgeLeds
  1517  025B  0871               	movf	??_badgeLeds,w
  1518  025C  00A8               	movwf	_Matrix+8	;volatile
  1519                           
  1520                           ;main.c: 124: Matrix.data.L7 = (unsigned char) (0x01 & (leds >> 1));
  1521  025D  3673               	lsrf	badgeLeds@leds,w
  1522  025E  3901               	andlw	1
  1523  025F  00F1               	movwf	??_badgeLeds
  1524  0260  0871               	movf	??_badgeLeds,w
  1525  0261  00A7               	movwf	_Matrix+7	;volatile
  1526                           
  1527                           ;main.c: 125: Matrix.data.L6 = (unsigned char) (0x01 & (leds >> 2));
  1528  0262  0873               	movf	badgeLeds@leds,w
  1529  0263  00F1               	movwf	??_badgeLeds
  1530  0264  3002               	movlw	2
  1531  0265                     u855:	
  1532  0265  36F1               	lsrf	??_badgeLeds,f
  1533  0266  0B89               	decfsz	9,f
  1534  0267  2A65               	goto	u855
  1535  0268  0871               	movf	??_badgeLeds,w
  1536  0269  3901               	andlw	1
  1537  026A  00F2               	movwf	??_badgeLeds+1
  1538  026B  0872               	movf	??_badgeLeds+1,w
  1539  026C  00A6               	movwf	_Matrix+6	;volatile
  1540                           
  1541                           ;main.c: 126: Matrix.data.L5 = (unsigned char) (0x01 & (leds >> 3));
  1542  026D  0873               	movf	badgeLeds@leds,w
  1543  026E  00F1               	movwf	??_badgeLeds
  1544  026F  3003               	movlw	3
  1545  0270                     u865:	
  1546  0270  36F1               	lsrf	??_badgeLeds,f
  1547  0271  0B89               	decfsz	9,f
  1548  0272  2A70               	goto	u865
  1549  0273  0871               	movf	??_badgeLeds,w
  1550  0274  3901               	andlw	1
  1551  0275  00F2               	movwf	??_badgeLeds+1
  1552  0276  0872               	movf	??_badgeLeds+1,w
  1553  0277  00A5               	movwf	_Matrix+5	;volatile
  1554                           
  1555                           ;main.c: 127: Matrix.data.L4 = (unsigned char) (0x01 & (leds >> 4));
  1556  0278  0873               	movf	badgeLeds@leds,w
  1557  0279  00F1               	movwf	??_badgeLeds
  1558  027A  3004               	movlw	4
  1559  027B                     u875:	
  1560  027B  36F1               	lsrf	??_badgeLeds,f
  1561  027C  0B89               	decfsz	9,f
  1562  027D  2A7B               	goto	u875
  1563  027E  0871               	movf	??_badgeLeds,w
  1564  027F  3901               	andlw	1
  1565  0280  00F2               	movwf	??_badgeLeds+1
  1566  0281  0872               	movf	??_badgeLeds+1,w
  1567  0282  00A4               	movwf	_Matrix+4	;volatile
  1568                           
  1569                           ;main.c: 128: Matrix.data.L3 = (unsigned char) (0x01 & (leds >> 5));
  1570  0283  0873               	movf	badgeLeds@leds,w
  1571  0284  00F1               	movwf	??_badgeLeds
  1572  0285  3005               	movlw	5
  1573  0286                     u885:	
  1574  0286  36F1               	lsrf	??_badgeLeds,f
  1575  0287  0B89               	decfsz	9,f
  1576  0288  2A86               	goto	u885
  1577  0289  0871               	movf	??_badgeLeds,w
  1578  028A  3901               	andlw	1
  1579  028B  00F2               	movwf	??_badgeLeds+1
  1580  028C  0872               	movf	??_badgeLeds+1,w
  1581  028D  00A3               	movwf	_Matrix+3	;volatile
  1582                           
  1583                           ;main.c: 129: Matrix.data.L2 = (unsigned char) (0x01 & (leds >> 6));
  1584  028E  0873               	movf	badgeLeds@leds,w
  1585  028F  00F1               	movwf	??_badgeLeds
  1586  0290  3006               	movlw	6
  1587  0291                     u895:	
  1588  0291  36F1               	lsrf	??_badgeLeds,f
  1589  0292  0B89               	decfsz	9,f
  1590  0293  2A91               	goto	u895
  1591  0294  0871               	movf	??_badgeLeds,w
  1592  0295  3901               	andlw	1
  1593  0296  00F2               	movwf	??_badgeLeds+1
  1594  0297  0872               	movf	??_badgeLeds+1,w
  1595  0298  00A2               	movwf	_Matrix+2	;volatile
  1596                           
  1597                           ;main.c: 130: Matrix.data.L1 = (unsigned char) (0x01 & (leds >> 7));
  1598  0299  0873               	movf	badgeLeds@leds,w
  1599  029A  00F1               	movwf	??_badgeLeds
  1600  029B  3007               	movlw	7
  1601  029C                     u905:	
  1602  029C  36F1               	lsrf	??_badgeLeds,f
  1603  029D  0B89               	decfsz	9,f
  1604  029E  2A9C               	goto	u905
  1605  029F  0871               	movf	??_badgeLeds,w
  1606  02A0  3901               	andlw	1
  1607  02A1  00F2               	movwf	??_badgeLeds+1
  1608  02A2  0872               	movf	??_badgeLeds+1,w
  1609  02A3  00A1               	movwf	_Matrix+1	;volatile
  1610  02A4  0008               	return
  1611  02A5                     __end_of_badgeLeds:	
  1612                           
  1613                           	psect	intentry
  1614  0004                     __pintentry:	
  1615 ;; *************** function _isr *****************
  1616 ;; Defined at:
  1617 ;;		line 135 in file "main.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;		None
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;		None
  1622 ;; Return value:  Size  Location     Type
  1623 ;;                  1    wreg      void 
  1624 ;; Registers used:
  1625 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1626 ;; Tracked objects:
  1627 ;;		On entry : 0/0
  1628 ;;		On exit  : 1F/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMMON   BANK0   BANK1
  1631 ;;      Params:         0       0       0
  1632 ;;      Locals:         0       0       0
  1633 ;;      Temps:          1       0       0
  1634 ;;      Totals:         1       0       0
  1635 ;;Total ram usage:        1 bytes
  1636 ;; Hardware stack levels used:    1
  1637 ;; Hardware stack levels required when called:    1
  1638 ;; This function calls:
  1639 ;;		_Display
  1640 ;; This function is called by:
  1641 ;;		Interrupt level 1
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645  0004                     _isr:	
  1646                           
  1647                           ;incstack = 0
  1648  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  1649                           
  1650                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1651  0005  3180               	pagesel	$
  1652                           
  1653                           ;main.c: 137: if (INTCONbits.IOCIF == 1 && IOCAFbits.IOCAF3 == 1)
  1654  0006  1C0B               	btfss	11,0	;volatile
  1655  0007  2823               	goto	i1l1270
  1656  0008  0027               	movlb	7	; select bank7
  1657  0009  1D93               	btfss	19,3	;volatile
  1658  000A  2823               	goto	i1l1270
  1659                           
  1660                           ;main.c: 138: {;main.c: 139: INTCONbits.IOCIE = 0;
  1661  000B  118B               	bcf	11,3	;volatile
  1662                           
  1663                           ;main.c: 140: if (debounce == 0) {
  1664  000C  0020               	movlb	0	; select bank0
  1665  000D  0829               	movf	_debounce,w	;volatile
  1666  000E  1D03               	btfss	3,2
  1667  000F  2820               	goto	i1l1266
  1668                           
  1669                           ;main.c: 141: debounce = 1;
  1670  0010  3001               	movlw	1
  1671  0011  00F0               	movwf	??_isr
  1672  0012  0870               	movf	??_isr,w
  1673  0013  00A9               	movwf	_debounce	;volatile
  1674                           
  1675                           ;main.c: 142: animation++;
  1676  0014  3001               	movlw	1
  1677  0015  00F0               	movwf	??_isr
  1678  0016  0870               	movf	??_isr,w
  1679  0017  07B8               	addwf	_animation,f	;volatile
  1680                           
  1681                           ;main.c: 143: if (animation > 9) {
  1682  0018  300A               	movlw	10
  1683  0019  0238               	subwf	_animation,w	;volatile
  1684  001A  1C03               	skipc
  1685  001B  2820               	goto	i1l1266
  1686                           
  1687                           ;main.c: 144: animation = 1;
  1688  001C  3001               	movlw	1
  1689  001D  00F0               	movwf	??_isr
  1690  001E  0870               	movf	??_isr,w
  1691  001F  00B8               	movwf	_animation	;volatile
  1692  0020                     i1l1266:	
  1693                           
  1694                           ;main.c: 145: };main.c: 146: };main.c: 147: IOCAFbits.IOCAF3 = 0;
  1695  0020  0027               	movlb	7	; select bank7
  1696  0021  1193               	bcf	19,3	;volatile
  1697                           
  1698                           ;main.c: 148: INTCONbits.IOCIE = 1;
  1699  0022  158B               	bsf	11,3	;volatile
  1700  0023                     i1l1270:	
  1701                           
  1702                           ;main.c: 149: };main.c: 151: if (PIR1bits.TMR1IF == 1)
  1703  0023  0020               	movlb	0	; select bank0
  1704  0024  1C11               	btfss	17,0	;volatile
  1705  0025  2837               	goto	i1l73
  1706                           
  1707                           ;main.c: 152: {;main.c: 153: T1CONbits.TMR1ON = 0;
  1708  0026  1018               	bcf	24,0	;volatile
  1709                           
  1710                           ;main.c: 154: position++;
  1711  0027  3001               	movlw	1
  1712  0028  00F0               	movwf	??_isr
  1713  0029  0870               	movf	??_isr,w
  1714  002A  07FD               	addwf	_position,f	;volatile
  1715                           
  1716                           ;main.c: 155: if (position > 8) {
  1717  002B  3009               	movlw	9
  1718  002C  027D               	subwf	_position,w	;volatile
  1719  002D  1C03               	skipc
  1720  002E  2833               	goto	i1l1280
  1721                           
  1722                           ;main.c: 156: position = 1;
  1723  002F  3001               	movlw	1
  1724  0030  00F0               	movwf	??_isr
  1725  0031  0870               	movf	??_isr,w
  1726  0032  00FD               	movwf	_position	;volatile
  1727  0033                     i1l1280:	
  1728                           
  1729                           ;main.c: 157: };main.c: 158: Display();
  1730  0033  21F9               	fcall	_Display
  1731                           
  1732                           ;main.c: 159: PIR1bits.TMR1IF = 0;
  1733  0034  0020               	movlb	0	; select bank0
  1734  0035  1011               	bcf	17,0	;volatile
  1735                           
  1736                           ;main.c: 160: T1CONbits.TMR1ON = 1;
  1737  0036  1418               	bsf	24,0	;volatile
  1738  0037                     i1l73:	
  1739  0037  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1740  0038  0009               	retfie
  1741  0039                     __end_of_isr:	
  1742                           
  1743                           	psect	text6
  1744  01F9                     __ptext6:	
  1745 ;; *************** function _Display *****************
  1746 ;; Defined at:
  1747 ;;		line 64 in file "main.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  1756 ;; Tracked objects:
  1757 ;;		On entry : 1F/0
  1758 ;;		On exit  : 1C/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMMON   BANK0   BANK1
  1761 ;;      Params:         0       0       0
  1762 ;;      Locals:         0       0       0
  1763 ;;      Temps:          0       0       0
  1764 ;;      Totals:         0       0       0
  1765 ;;Total ram usage:        0 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; This function calls:
  1768 ;;		Nothing
  1769 ;; This function is called by:
  1770 ;;		_isr
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           
  1774                           
  1775                           ;psect for function _Display
  1776  01F9                     _Display:	
  1777                           
  1778                           ;main.c: 66: if (Matrix.byte[position] == 1) {
  1779                           
  1780                           ;incstack = 0
  1781                           ; Regs used in _Display: [wreg-fsr1h+status,2+status,0]
  1782  01F9  087D               	movf	_position,w
  1783  01FA  3E20               	addlw	(low (_Matrix| 0))& (0+255)
  1784  01FB  0086               	movwf	6
  1785  01FC  0187               	clrf	7
  1786  01FD  0301               	decf	1,w
  1787  01FE  1903               	btfsc	3,2
  1788  01FF  2A39               	goto	i1l1198
  1789  0200  2A53               	goto	i1l1200
  1790  0201                     i1l1180:	
  1791                           
  1792                           ;main.c: 69: TRISA = 0b00101011;
  1793  0201  302B               	movlw	43
  1794  0202  0021               	movlb	1	; select bank1
  1795  0203  008C               	movwf	12	;volatile
  1796                           
  1797                           ;main.c: 70: LATA = 0b00000100;
  1798  0204  3004               	movlw	4
  1799  0205  0022               	movlb	2	; select bank2
  1800  0206  008C               	movwf	12	;volatile
  1801                           
  1802                           ;main.c: 71: break;
  1803  0207  0008               	return
  1804  0208                     i1l1182:	
  1805                           
  1806                           ;main.c: 73: TRISA = 0b00001111;
  1807  0208  300F               	movlw	15
  1808  0209  0021               	movlb	1	; select bank1
  1809  020A  008C               	movwf	12	;volatile
  1810                           
  1811                           ;main.c: 74: LATA = 0b00010000;
  1812  020B  3010               	movlw	16
  1813  020C  0022               	movlb	2	; select bank2
  1814  020D  008C               	movwf	12	;volatile
  1815                           
  1816                           ;main.c: 75: break;
  1817  020E  0008               	return
  1818  020F                     i1l1184:	
  1819                           
  1820                           ;main.c: 77: TRISA = 0b00101011;
  1821  020F  302B               	movlw	43
  1822  0210  0021               	movlb	1	; select bank1
  1823  0211  008C               	movwf	12	;volatile
  1824                           
  1825                           ;main.c: 78: LATA = 0b00010000;
  1826  0212  3010               	movlw	16
  1827  0213  0022               	movlb	2	; select bank2
  1828  0214  008C               	movwf	12	;volatile
  1829                           
  1830                           ;main.c: 79: break;
  1831  0215  0008               	return
  1832  0216                     i1l1186:	
  1833                           
  1834                           ;main.c: 81: TRISA = 0b00001111;
  1835  0216  300F               	movlw	15
  1836  0217  0021               	movlb	1	; select bank1
  1837  0218  008C               	movwf	12	;volatile
  1838                           
  1839                           ;main.c: 82: LATA = 0b00100000;
  1840  0219  3020               	movlw	32
  1841  021A  0022               	movlb	2	; select bank2
  1842  021B  008C               	movwf	12	;volatile
  1843                           
  1844                           ;main.c: 83: break;
  1845  021C  0008               	return
  1846  021D                     i1l1188:	
  1847                           
  1848                           ;main.c: 85: TRISA = 0b00011011;
  1849  021D  301B               	movlw	27
  1850  021E  0021               	movlb	1	; select bank1
  1851  021F  008C               	movwf	12	;volatile
  1852                           
  1853                           ;main.c: 86: LATA = 0b00000100;
  1854  0220  3004               	movlw	4
  1855  0221  0022               	movlb	2	; select bank2
  1856  0222  008C               	movwf	12	;volatile
  1857                           
  1858                           ;main.c: 87: break;
  1859  0223  0008               	return
  1860  0224                     i1l1190:	
  1861                           
  1862                           ;main.c: 89: TRISA = 0b00011011;
  1863  0224  301B               	movlw	27
  1864  0225  0021               	movlb	1	; select bank1
  1865  0226  008C               	movwf	12	;volatile
  1866                           
  1867                           ;main.c: 90: LATA = 0b00100000;
  1868  0227  3020               	movlw	32
  1869  0228  0022               	movlb	2	; select bank2
  1870  0229  008C               	movwf	12	;volatile
  1871                           
  1872                           ;main.c: 91: break;
  1873  022A  0008               	return
  1874  022B                     i1l1192:	
  1875                           
  1876                           ;main.c: 93: TRISA = 0b00111100;
  1877  022B  303C               	movlw	60
  1878  022C  0021               	movlb	1	; select bank1
  1879  022D  008C               	movwf	12	;volatile
  1880                           
  1881                           ;main.c: 94: LATA = 0b00000001;
  1882  022E  3001               	movlw	1
  1883  022F  0022               	movlb	2	; select bank2
  1884  0230  008C               	movwf	12	;volatile
  1885                           
  1886                           ;main.c: 95: break;
  1887  0231  0008               	return
  1888  0232                     i1l1194:	
  1889                           
  1890                           ;main.c: 97: TRISA = 0b00111100;
  1891  0232  303C               	movlw	60
  1892  0233  0021               	movlb	1	; select bank1
  1893  0234  008C               	movwf	12	;volatile
  1894                           
  1895                           ;main.c: 98: LATA = 0b00000010;
  1896  0235  3002               	movlw	2
  1897  0236  0022               	movlb	2	; select bank2
  1898  0237  008C               	movwf	12	;volatile
  1899                           
  1900                           ;main.c: 99: break;
  1901  0238  0008               	return
  1902  0239                     i1l1198:	
  1903  0239  087D               	movf	_position,w	;volatile
  1904                           
  1905                           ; Switch size 1, requested type "simple"
  1906                           ; Number of cases is 8, Range of values is 1 to 8
  1907                           ; switch strategies available:
  1908                           ; Name         Instructions Cycles
  1909                           ; direct_byte           25     9 (fixed)
  1910                           ; simple_byte           25    13 (average)
  1911                           ; jumptable            263     9 (fixed)
  1912                           ;	Chosen strategy is simple_byte
  1913  023A  3A01               	xorlw	1	; case 1
  1914  023B  1903               	skipnz
  1915  023C  2A01               	goto	i1l1180
  1916  023D  3A03               	xorlw	3	; case 2
  1917  023E  1903               	skipnz
  1918  023F  2A08               	goto	i1l1182
  1919  0240  3A01               	xorlw	1	; case 3
  1920  0241  1903               	skipnz
  1921  0242  2A0F               	goto	i1l1184
  1922  0243  3A07               	xorlw	7	; case 4
  1923  0244  1903               	skipnz
  1924  0245  2A16               	goto	i1l1186
  1925  0246  3A01               	xorlw	1	; case 5
  1926  0247  1903               	skipnz
  1927  0248  2A1D               	goto	i1l1188
  1928  0249  3A03               	xorlw	3	; case 6
  1929  024A  1903               	skipnz
  1930  024B  2A24               	goto	i1l1190
  1931  024C  3A01               	xorlw	1	; case 7
  1932  024D  1903               	skipnz
  1933  024E  2A2B               	goto	i1l1192
  1934  024F  3A0F               	xorlw	15	; case 8
  1935  0250  1903               	skipnz
  1936  0251  2A32               	goto	i1l1194
  1937  0252  2A56               	goto	i1l57
  1938  0253                     i1l1200:	
  1939                           
  1940                           ;main.c: 102: TRISA = 0b00111111;
  1941  0253  303F               	movlw	63
  1942  0254  0021               	movlb	1	; select bank1
  1943  0255  008C               	movwf	12	;volatile
  1944  0256                     i1l57:	
  1945  0256  0008               	return
  1946  0257                     __end_of_Display:	
  1947  007E                     btemp	set	126	;btemp
  1948  007E                     int$flags	set	126
  1949  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         11
    Persistent  34
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80      9      25
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _rand->___lmul

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_rand

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     420
                                              7 BANK0      2     2      0
                          _badgeLeds
                     _initializeVars
                               _rand
 ---------------------------------------------------------------------------------
 (1) _rand                                                 7     5      2     244
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     244
                                              1 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (1) _initializeVars                                       1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _badgeLeds                                            3     3      0     176
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
                            _Display
 ---------------------------------------------------------------------------------
 (4) _Display                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _badgeLeds
   _initializeVars
   _rand
     ___lmul

 _isr (ROOT)
   _Display

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      27       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      9      19       6       31.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      27       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Sep 16 20:32:50 2019

            __CFG_CP$OFF 0000                       l82 0081                       l84 0087  
                     l85 008B                       l86 008F                       l95 00D6  
                     l87 0093                      l103 010F                      l125 01CA  
                    l117 018B             __CFG_CPD$OFF 0000                      u815 02F0  
                    u905 029C                      u825 02F7                      u915 02D0  
                    u855 0265                      u865 0270                      u875 027B  
                    u885 0286                      u895 0291                      _isr 0004  
           __CFG_BORV$LO 0000                      wreg 0009             __CFG_LVP$OFF 0000  
                   l1310 006A                     l1164 02E5                     l1500 01A6  
                   l1412 0116                     l1332 009A                     l1430 0134  
                   l1350 00B8                     l1168 02EF                     l1512 01BA  
                   l1424 012A                     l1344 00AE                     l1506 01B0  
                   l1442 0148                     l1418 0120                     l1362 00CC  
                   l1338 00A4                     l1530 01EC                     l1460 0166  
                   l1436 013E                     l1372 00DD                     l1356 00C2  
                   l1518 01C4                     l1454 015C                     l1390 00FB  
                   l1472 017A                     l1448 0152                     l1384 00F1  
                   l1528 01CF                     l1466 0170                     l1378 00E7  
                   l1396 0105                     l1494 019C                     l1478 0184  
                   l1488 0192                     ?_isr 0070                     _LATA 010C  
                   u1607 01F2                     u1597 0077                     i1l57 0256  
                   i1l73 0037                     _WPUA 020C         ??_initializeVars 0071  
           __CFG_WRT$OFF 0000                     _main 0050                     _rand 02A5  
                   fsr1h 0007                     indf1 0001                     fsr1l 0006  
                   btemp 007E            __CFG_BOREN$ON 0000                     start 0039  
          __CFG_IESO$OFF 0000          __end_of_Display 0257                    ??_isr 0070  
          __CFG_PLLEN$ON 0000                    ?_main 0070                    ?_rand 002B  
          __CFG_WDTE$OFF 0000                    _T1CON 0018                    _TRISA 008C  
    ___lmul@multiplicand 0075            __CFG_PWRTE$ON 0000           __CFG_FCMEN$OFF 0000  
                  _randx 0034                    _steps 002A                    status 0003  
                  wtemp0 007E           __CFG_MCLRE$OFF 0000          __initialization 003A  
           __end_of_main 01F9             __end_of_rand 02DD                   ??_main 0032  
                 ??_rand 002D                   _ANSELA 018C                   i1l1200 0253  
                 i1l1180 0201                   i1l1190 0224                   i1l1182 0208  
                 i1l1270 0023                   i1l1192 022B                   i1l1184 020F  
                 i1l1280 0033                   i1l1194 0232                   i1l1186 0216  
                 i1l1266 0020                   i1l1188 021D                   i1l1198 0239  
                 _INTCON 000B                   _OSCCON 0099                ??_Display 0070  
                 _Matrix 0020                   ___lmul 02DD           __CFG_STVREN$ON 0000  
__end_of__initialization 004D       __size_of_badgeLeds 004E           __pcstackCOMMON 0070  
           __pidataBANK0 0321           _OPTION_REGbits 0095               __pbssBANK0 0020  
             __pnvCOMMON 007D               __pmaintext 0050                  ?___lmul 0071  
             __pintentry 0004           ___lmul@product 0079        __end_of_badgeLeds 02A5  
                _Display 01F9          __size_of___lmul 002F                  __ptext1 02A5  
                __ptext2 02DD                  __ptext3 030C                  __ptext4 0257  
                __ptext6 01F9                _T1CONbits 0018             __size_of_isr 0035  
              _IOCAFbits 0393                _IOCANbits 0392     end_of_initialization 004D  
__size_of_initializeVars 0015         __CFG_FOSC$INTOSC 0000           __end_of___lmul 030C  
    start_initialization 003A              __end_of_isr 0039            badgeLeds@leds 0073  
               ??___lmul 0079              __pdataBANK0 0034                ___latbits 0000  
          __pcstackBANK0 002B                _badgeLeds 0257                 ?_Display 0070  
              __pnvBANK0 0038           _initializeVars 030C                _animation 0038  
             ?_badgeLeds 0070                 _PIE1bits 0091   __end_of_initializeVars 0321  
               _PIR1bits 0011        ___lmul@multiplier 0071         __size_of_Display 005E  
        ?_initializeVars 0070                 _debounce 0029              ??_badgeLeds 0071  
          __size_of_main 01A9            __size_of_rand 0038                 int$flags 007E  
               _position 007D               _INTCONbits 000B                 intlevel1 0000  
      __CFG_CLKOUTEN$OFF 0000  
